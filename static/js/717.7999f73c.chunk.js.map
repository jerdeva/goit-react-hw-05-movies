{"version":3,"file":"static/js/717.7999f73c.chunk.js","mappings":"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","sources":["components/Api/Api.js","components/Button/Button.styled.js","components/Button/Button.js","components/Loader/Loader.js","components/pages/MovieDetails.styled.js","components/pages/MovieDetails.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KAY = '043e5f0af957ed407534eefdb77ba7dd';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst params = {\n  params: {\n    api_key: API_KAY,\n    language: 'en-US',\n  },\n};\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(`trending/movie/day`, params);\n  return response.data.results;\n};\n\nexport const getTrendingMoviesWeek = async () => {\n  const response = await axios.get(`trending/movie/week`, params);\n  return response.data.results;\n};\n\nexport const searchMoviesByWord = async movieId => {\n  const response = await axios.get(`/movie/${movieId}`, params);\n  return response.data;\n};\n\nexport const getSearch = async movieName => {\n  const response = await axios.get(`/search/movie?query=${movieName}`, params);\n  return response.data.results;\n};\n\nexport const getMovieCredits = async movieId => {\n  const response = await axios.get(`movie/${movieId}/credits?`, params);\n  return response.data.cast;\n};\n\nexport const getMovieReviews = async movie_id => {\n  const response = await axios.get(`movie/${movie_id}/reviews?`, params);\n  return response.data.results;\n};\n","import styled from 'styled-components';\n\nexport const Btn = styled.button`\n  background-color: #7fb5e1;\n  color: #064e8a;\n  border: none;\n  font-weight: 800;\n  border-radius: 4px;\n  box-shadow: 0px 0px 2px 2px #064e8a;\n  margin-right: 12px;\n  margin-bottom: 4px;\n  padding: 8px 16px;\n  &:hover,\n  &:focus {\n    color: white;\n    background-color: #064e8a;\n  }\n  &:active {\n    color: white;\n    background-color: #064e8a;\n  }\n`;\n","import { Btn } from './Button.styled';\n\nconst Button = ({ text }) => {\n  return <Btn type=\"button\">{text}</Btn>;\n};\nexport default Button;\n","import { FidgetSpinner } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  <FidgetSpinner\n    visible={true}\n    height=\"80\"\n    width=\"80\"\n    ariaLabel=\"dna-loading\"\n    wrapperStyle={{}}\n    wrapperClass=\"dna-wrapper\"\n    ballColors={['#ff0000', '#00ff00', '#0000ff']}\n    backgroundColor=\"#F4442E\"\n  />;\n};\n","import styled from 'styled-components';\n\nexport const FilmNameTitle = styled.h1`\n  color: #53a8b6;\n`;\nexport const UserScoreTitle = styled.h4`\n  color: #f76b8a;\n`;\n\nexport const OverviewTitle = styled.h2`\n  color: #53a8b6;\n`;\n\nexport const OverviewParagrapher = styled.p`\n  color: black;\n`;\n\nexport const GenresTitle = styled.h2`\n  color: #53a8b6;\n`;\n\nexport const ProductionCompaniesListTitle = styled.h3`\n  color: #53a8b6;\n`;\n\nexport const AdditionalInformationTitle = styled.h3`\n  color: #53a8b6;\n`;\n\nexport const WrapperOne = styled.div`\n  display: flex;\n`;\n\nexport const ImgWrapper = styled.div`\n  margin: 24px;\n`;\n","import React, { useEffect, useState, useRef, Suspense } from 'react';\nimport { useParams, Link, Outlet, useLocation } from 'react-router-dom';\nimport { searchMoviesByWord } from '../Api/Api';\nimport Button from '../Button/Button';\nimport { Loader } from '../Loader/Loader';\n\nimport {\n  FilmNameTitle,\n  UserScoreTitle,\n  OverviewTitle,\n  OverviewParagrapher,\n  GenresTitle,\n  ProductionCompaniesListTitle,\n  AdditionalInformationTitle,\n  WrapperOne,\n  ImgWrapper,\n} from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movieDetails, setMovieDetails] = useState(null);\n  const location = useLocation();\n  const backLinkHref = useRef(location.state?.from || '/');\n\n  useEffect(() => {\n    const movieDetails = async () => {\n      try {\n        const movie = await searchMoviesByWord(movieId);\n        setMovieDetails(movie);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    movieDetails();\n  }, [movieId]);\n\n  if (!movieDetails) {\n    return <Loader />;\n  }\n\n  const productionCompaniesList = movieDetails.production_companies?.map(\n    ({ id, logo_path, name }) =>\n      logo_path && (\n        <li key={id}>\n          {logo_path && (\n            <img\n              src={`https://image.tmdb.org/t/p/w500${logo_path}`}\n              alt={name}\n              style={{\n                maxHeight: 50,\n                maxWidth: 200,\n                marginRight: 30,\n                marginTop: 10,\n              }}\n            />\n          )}\n        </li>\n      )\n  );\n\n  const roundedPopularity = Math.round(movieDetails.vote_average * 10);\n\n  return (\n    <div>\n      <Link to={backLinkHref.current}>\n        <Button text=\"Go back\" />\n      </Link>\n      <WrapperOne backdrop={movieDetails.backdrop_path}>\n        <ImgWrapper>\n          <img\n            src={\n              movieDetails.poster_path\n                ? `https://image.tmdb.org/t/p/w500${movieDetails.poster_path}`\n                : `opps`\n            }\n            alt={movieDetails.title}\n            width={300}\n          />\n        </ImgWrapper>\n        <div>\n          <FilmNameTitle>{movieDetails.title}</FilmNameTitle>\n          <UserScoreTitle>User score: {roundedPopularity}%</UserScoreTitle>\n          <OverviewTitle>Overview</OverviewTitle>\n          <OverviewParagrapher>{movieDetails.overview}</OverviewParagrapher>\n          <GenresTitle>Genres</GenresTitle>\n          <p>\n            {movieDetails.genres.map(genre => (\n              <span key={genre.id}> {genre.name}</span>\n            ))}\n          </p>\n          {productionCompaniesList[0] !== null &&\n            productionCompaniesList.length > 0 && (\n              <>\n                <ProductionCompaniesListTitle>\n                  Production companies\n                </ProductionCompaniesListTitle>\n                <div>{productionCompaniesList}</div>\n              </>\n            )}\n        </div>\n      </WrapperOne>\n      <hr />\n      <AdditionalInformationTitle>\n        Additional information\n      </AdditionalInformationTitle>\n      <Link to=\"cast\">\n        <Button text=\"Cast\" />\n      </Link>\n      <Link to=\"reviews\">\n        <Button text=\"Reviews\" />\n      </Link>\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["axios","params","api_key","language","getTrendingMovies","response","data","results","getTrendingMoviesWeek","searchMoviesByWord","movieId","getSearch","movieName","getMovieCredits","cast","getMovieReviews","movie_id","Btn","styled","text","type","Loader","FilmNameTitle","UserScoreTitle","OverviewTitle","OverviewParagrapher","GenresTitle","ProductionCompaniesListTitle","AdditionalInformationTitle","WrapperOne","ImgWrapper","useParams","useState","movieDetails","setMovieDetails","location","useLocation","backLinkHref","useRef","state","from","useEffect","movie","console","error","productionCompaniesList","production_companies","map","id","logo_path","name","src","alt","style","maxHeight","maxWidth","marginRight","marginTop","roundedPopularity","Math","round","vote_average","to","current","backdrop","backdrop_path","poster_path","title","width","overview","genres","genre","length","Suspense","fallback"],"sourceRoot":""}